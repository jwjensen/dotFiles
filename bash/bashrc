. ~/.env_variables

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000
export HISTTIMEFORMAT='%F %T '
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompts (non-color, unless we know we "want" color)
case "$TERM" in
    screen|xterm*) color_prompt=yes;;
esac
if [ JEJ$EMACS = JEJt ] ; then
    color_prompt=yes
    export GIT_PAGER=
fi
# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    XTERM_TITLE="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]"
    ;;
*)
    XTERM_TITLE=""
    ;;
esac
#minitube
export GOOGLE_API_KEY=AIzaSyBe2QwlEGS-FmK3VHXX6pZ9S580kWpd0gk

export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM=verbose
if [ "$color_prompt" = yes ]; then
    PROMPT_COMMAND='__git_ps1 "$XTERM_TITLE\n${debian_chroot:+($debian_chroot)}[`basename ${VIRTUAL_ENV:-"/x/--"}`] \[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w \[\033[01;36m\]\t\[\033[01;0m\]" "\n{\!} \[\033[00m\]\$ "'
#    PS1='\n\[\033[01;35m\]$(__git_ps1) ${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;35m\]\w \[\033[01;36m\]\t \n{\!} \[\033[00m\]\$ '
    export GIT_PS1_SHOWCOLORHINTS=true
else
    PROMPT_COMMAND='__git_ps1 "$XTERM_TITLE\n" "[`basename ${VIRTUAL_ENV:-"/x/--"}`] ${debian_chroot:+($debian_chroot)}\u@\h:\w \t\n{\!} \$ "'
#    PS1='\n$(__git_ps1) ${debian_chroot:+($debian_chroot)}\u@\h:\w \t\n{\!} \$ '
fi
unset color_prompt force_color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && . ~/.dircolors
    alias ls='ls --color=auto -FC'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -l'
alias la='ls -A'
alias dirs='dirs -v'
#alias ls='/bin/ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

svnlog ()
{
  WORKDIR="http://svn/svn/repos/dcs2000/branches/work-$1-$2"
  ARTIFACT=$1
  svn log --stop-on-copy -v $WORKDIR
}

svnmerge ()
{
  REVISIONS=$1
  if [ -d Artifacts -a -d DCS/Database ] ; then
    svn merge -r $REVISIONS $WORKDIR
    svn stat
    echo svn rm -m "[artf$ARTIFACT] removing post merge" $WORKDIR >> merged_artf
  else
    echo "Needs to be run from root of dcs2000 sandbox"
  fi
}

svncommit ()
{
  if [ -d Artifacts -a -d DCS/Database ] ; then
    svn commit -m "[artf$ARTIFACT] merged rev $REVISIONS from branch.  installed $1"
  else
    echo "Needs to be run from root of dcs2000 sandbox"
  fi
}

svnps ()
{
  svn ps svn:keywords 'HeadURL Id' $1
  svn ps svn:eol-style native $1
}

svnpd ()
{ 
  svn pd svn:mergeinfo $1
}

# shows available merges from $1
svnrevs ()
{
    svn mergeinfo ^/$1 --show-revs eligible
}

#creates commit-msg with avail revs, and log for each rev
# suitable for review before development merging
svnrevslog ()
{
    svnrevs $1 >> commit-msg

    for i in `svnrevs $1`; do
        echo $i >> commit-msg
        svn log -r $i ^/$1 -v >> commit-msg
        echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-" >> commit-msg
    done
}

#display files referenced by install.sql; display log
svnchanges ()
{
    grep @ Artifacts/$1/install.sql | grep -ve '^--'
    svn log Artifacts/$1/install.sql
}



[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

#for virtualenvwrapper:
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
